---
title: "Assignment 2"
---

### Question 1
```{r}

install.packages(library(tidyverse))
install.packages(library(reshape2))
install.packages(library(rvest))
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(knitr)
library(reshape2)
library(lubridate)

# Url before 2010
before_2010 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250"

# Url years between 2010 and now
url_2010_2023 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250"

```

### Question 2
```{r}
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)

# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"

# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
  data <- read_html(url)
  
  name <- data %>%
    html_nodes('.ipc-title__text') %>%
    html_text()
  
  rating <- data %>%
    html_nodes('.ipc-rating-star--base') %>%
    html_attr('aria-label') %>%
    str_extract("\\d+\\.\\d+|\\d+") %>%
    map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
  
  year <- data %>%
    html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
    html_text() %>%
    str_extract("\\d{4}") %>%
    map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
  
  duration <- data %>%
    html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
    html_text() %>%
    str_extract("\\d+h \\d+m|\\d+h") %>%
    str_replace_all("h|\\s", ":") %>%
    str_replace_all("m", "") %>%
    str_split(":") %>%
    map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
  
  vote <- data %>%
    html_nodes('.kRnqtn') %>%
    html_text() %>%
    parse_number()
  
  # Uzunluğu eşitlemek için kırpma işlemi
  min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
  name <- name[1:min_length]
  rating <- rating[1:min_length]
  year <- year[1:min_length]
  duration <- duration[1:min_length]
  vote <- vote[1:min_length]
  
  return(data.frame(name, rating, year, duration, vote))
}

# Verileri çekme
movies_1 <- scrape_imdb_data(login_url_1)
movies_2 <- scrape_imdb_data(login_url_2)
movies <- bind_rows(movies_1, movies_2)

# Sonuçları kontrol etme
print(head(movies, 10))


```

### Question 3

# a-)

```{r}
# Sorting movies by rating
sorted_movies <- movies %>% arrange(desc(rating))

# Top 5 movies
top_5_movies <- head(sorted_movies, 5)

# Bottom 5 movies
bottom_5_movies <- tail(sorted_movies, 5)

# Displaying the results
top_5_movies
bottom_5_movies



```

# b-)

```{r}

```
# c-)

```{r}
# Calculating yearly averages
yearly_averages <- movies %>% 
  group_by(year) %>%
  summarise(average_rating = mean(rating, na.rm = TRUE),
            movie_count = n())

# Scatter plot for average ratings over the years
ggplot(yearly_averages, aes(x = year, y = average_rating)) +
  geom_point() +
  labs(title = "Yearly Average Ratings of Turkish Movies")

# Scatter plot for number of movies over the years
ggplot(yearly_averages, aes(x = year, y = movie_count)) +
  geom_point() +
  labs(title = "Number of Movies Released Each Year")


```


# d-)
```{r}
# Korelasyon hesaplama
correlation_votes_ratings <- cor(movies$vote, movies$rating, use = "complete.obs")

# Scatter plot oluşturma
ggplot(movies, aes(x = vote, y = rating)) +
  geom_point() +
  labs(
    title = "Korelasyon: Votes vs Ratings",
    x = "Oy Sayısı",
    y = "IMDb Değerlendirmesi"
  ) +
  theme_minimal()

```

# e-)
```{r}
ggplot(data = movies, aes(x = duration, y = rating)) +
  geom_jitter() +
  labs(x = "Duration (Dakika)", y = "Rating") +
  ggtitle("Duration vs. Rating Scatterplot")

```

### Question 4

```{r}
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)

# IMDb URL'si tanımlanması
imdb_url <- "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"

# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
  data <- read_html(url)
  
  name <- data %>%
    html_nodes('.ipc-title__text') %>%
    html_text()
  
  year <- data %>%
    html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
    html_text() %>%
    substr(1, 4) %>%
    as.numeric()
  
  # Uzunluğu eşitlemek için kırpma işlemi
  min_length <- min(length(name), length(year))
  name <- name[1:min_length]
  year <- year[1:min_length]
  
  return(data.frame(name, year))
}

# Verileri çekme
top1000_df <- scrape_imdb_data(imdb_url)

# 'ratings' sütunu 'df' veri çerçevesinden alınmalıdır
new_df <- merge(x = top1000_df, y = df,
                by.x = c("name", "year"),
                by.y = c("titles", "years"), all.x = TRUE)

# 'ratings' sütunu eksikse, veri çerçevesini sıralamadan önce ekleyin
if ("ratings" %in% colnames(new_df)) {
  new_df <- new_df[order(new_df$ratings, decreasing = TRUE),]
}

# Sonuçları yazdırma



print(top1000_df, caption = "Turkish movies in IMDB Top 1000 with filled values")




```