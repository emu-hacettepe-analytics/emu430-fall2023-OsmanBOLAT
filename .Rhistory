source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Verileri çekme
movies_1 <- scrape_imdb_data(login_url_1)
movies_2 <- scrape_imdb_data(login_url_2)
movies <- bind_rows(movies_1, movies_2)
# Sonuçları kontrol etme
print(head(movies, 10))
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Verileri çekme
movies_1 <- scrape_imdb_data(login_url_1)
movies_2 <- scrape_imdb_data(login_url_2)
movies <- bind_rows(movies_1, movies_2)
# Sonuçları kontrol etme
print(head(movies, 10))
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Verileri çekme
movies_1 <- scrape_imdb_data(login_url_1)
movies_2 <- scrape_imdb_data(login_url_2)
movies <- bind_rows(movies_1, movies_2)
# Sonuçları kontrol etme
print(head(movies, 10))
# Gerekli kütüphanelerin yüklenmesi
library(tidyverse)
library(rvest)
# IMDb URL'lerinin tanımlanması
login_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
login_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-28&num_votes=2500,&country_of_origin=TR&count=250"
# Fonksiyon: IMDb verilerini çekme ve temizleme
scrape_imdb_data <- function(url) {
data <- read_html(url)
name <- data %>%
html_nodes('.ipc-title__text') %>%
html_text()
rating <- data %>%
html_nodes('.ipc-rating-star--base') %>%
html_attr('aria-label') %>%
str_extract("\\d+\\.\\d+|\\d+") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
year <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d{4}") %>%
map_dbl(~ ifelse(is.na(.x), NA_real_, as.numeric(.x)))
duration <- data %>%
html_nodes(xpath = '//*[contains(@class,"sc-43986a27-7")]') %>%
html_text() %>%
str_extract("\\d+h \\d+m|\\d+h") %>%
str_replace_all("h|\\s", ":") %>%
str_replace_all("m", "") %>%
str_split(":") %>%
map_dbl(~ sum(as.numeric(.x) * c(60, 1), na.rm = TRUE))
vote <- data %>%
html_nodes('.kRnqtn') %>%
html_text() %>%
parse_number()
# Uzunluğu eşitlemek için kırpma işlemi
min_length <- min(length(name), length(rating), length(year), length(duration), length(vote))
name <- name[1:min_length]
rating <- rating[1:min_length]
year <- year[1:min_length]
duration <- duration[1:min_length]
vote <- vote[1:min_length]
return(data.frame(name, rating, year, duration, vote))
}
# Verileri çekme
movies_1 <- scrape_imdb_data(login_url_1)
movies_2 <- scrape_imdb_data(login_url_2)
movies <- bind_rows(movies_1, movies_2)
# Sonuçları kontrol etme
print(head(movies, 10))
