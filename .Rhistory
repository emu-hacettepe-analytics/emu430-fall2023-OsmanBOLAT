titles <- page %>%
html_nodes(".lister-item-header a") %>%
html_text()
years <- page %>%
html_nodes(".lister-item-year") %>%
html_text()
# Clean the years to get only the year part
years <- gsub("\\D", "", years)
# Create a DataFrame
movies_df <- data.frame(Title = titles, Year = as.numeric(years))
# View the DataFrame
print(movies_df)
# Load the necessary libraries
library(rvest)
# Define the URL for the IMDb search page
url <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"
# Read the HTML content from the URL
page <- read_html(url)
# Extract the movie titles and years
titles <- page %>%
html_nodes(".lister-item-header a") %>%
html_text() %>%
trimws()
years <- page %>%
html_nodes(".lister-item-year") %>%
html_text() %>%
trimws()
# Create a data frame
turkish_movies <- data.frame(Title = titles, Year = years)
# Print the data frame
print(turkish_movies)
url_3 <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"
data_3 <- read_html(url_3)
name_3 <-html_nodes(data_3,'.ipc-title__text')
name_3 <- html_text(name_3)
name_3 <- tail(head(name_3,-1),-1)
name_3 <- str_split(name_3, " ", n=2)
name_3 <- unlist(lapply(name_3, function(x) {x[2]}))
year_3 <- html_elements(data_3,'.dli-title-metadata > span:nth-child(1)')
year_3 <- html_text(year_3)
year_3 <- as.factor(year_3)
imdb_top1000 <- data.frame(names=name_3,years=year_3)
imdb_top1000
#  Join the data frames
imdb_top1000$year <- as.numeric(as.character(imdb_top1000$year))
merged_data <- left_join(imdb_top1000,movies, by = c("names", "years"))
url_3 <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"
data_3 <- read_html(url_3)
name_3 <-html_nodes(data_3,'.ipc-title__text')
name_3 <- html_text(name_3)
name_3 <- tail(head(name_3,-1),-1)
name_3 <- str_split(name_3, " ", n=2)
name_3 <- unlist(lapply(name_3, function(x) {x[2]}))
year_3 <- html_elements(data_3,'.dli-title-metadata > span:nth-child(1)')
year_3 <- html_text(year_3)
year_3 <- as.factor(year_3)
imdb_top1000 <- data.frame(names=name_3,years=year_3)
imdb_top1000
#  Join the data frames
merged_data <- left_join(imdb_top1000, movies, by = c("names" = "movie_name", "years" = "release_year"))
url3 <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"
title3 <- read_html(url3) %>%
html_elements(".ipc-title__text") %>% html_text()
title3 <- tail(head(title3,-1),-1)
title3 <- str_split(title3, " ", n=2)
title3 <- unlist(lapply(title3, function(x) {x[2]}))
year3 <- read_html(url3)%>%html_elements(".dli-title-metadata-item:nth-child(1)")
year3 <- html_text(year3)
year3 <- as.factor(year3)
top1000 <- data.frame(Title=title3,Year=year3)
print(top1000)
```
url_new <- "https://www.imdb.com/search/title/?groups=top_1000&country_of_origin=TR"
title_new <- c()
year_new <- c()
for (url in url_new) {
page <- read_html(url)
# To extract titles
title_names_new <- page %>% html_nodes('.ipc-title__text') %>% html_text()
title_names_new <- tail(head(title_names_new, -1), -1)
title_names_new <- str_split(title_names_new, " ", n = 2)
title_names_new <- unlist(lapply(title_names_new, function(x) { x[2] }))
title_new <- append(title_new, title_names_new)
# To extract years
years_new <- page %>% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %>% html_text() %>% str_extract("\\d{4}") %>% as.numeric()
year_new <- append(year_new, years_new)
}
movies_df_new <- data.frame(title_new, year_new)
movies_df_new
library(dplyr)
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
library(dplyr)
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
print(favorite_movies)
movies_df %>% filter(title == "Ayla: The Daughter of War" | title == "Babam ve Oglum" | title == "Mucize") %>% arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
movies_df %>% filter(title == "Ayla: The Daughter of War" | title == "Babam ve Oglum" | title == "Mucize") %>% arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
movies_df %>%
filter(title %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
movies_df %>%
filter(title %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
movies_df %>%
filter(title %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
movies_df %>%
filter(title %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
movies_df %>%
filter(movie_title %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
# List column names in your data frame
names(movies_df)
movies_df %>%
filter(movie_title %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
# List column names in your data frame
names(movies_df)
movies_df %>%
filter(movie_name %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
# List column names in your data frame
colnames(movies_df)
movies_df %>%
filter(movieTitle %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize")) %>%
arrange(desc(rating))
#| code-fold: true
#| code-summary: "Show the code"
# List column names in your data frame
movies_df %>%
select(everything()) %>%
names()
colnames(movies_df)[grep("title|name", colnames(movies_df))]
#| code-fold: true
#| code-summary: "Show the code"
# List column names in your data frame
my_movies <- movies_df[movies_df$movie_titles %in% c("Ayla: The Daughter of War", "Babam ve Oglum", "Mucize"), ]
my_movies
#| code-fold: true
#| code-summary: "Show the code"
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
# Install the kableExtra package (if not already installed)
install.packages("kableExtra")
# Load the kableExtra package
library(kableExtra)
#| code-fold: true
#| code-summary: "Show the code"
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
#| code-fold: true
#| code-summary: "Show the code"
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
ranked_movies_joined <- result_df %>% arrange(desc(rating)) %>% head(11)
#| code-fold: true
#| code-summary: "Show the code"
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
#| code-fold: true
#| code-summary: "Show the code"
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
ranked_movies_joined <- result_df %>% arrange(desc(rating)) %>% head(11)
#| code-fold: true
#| code-summary: "Show the code"
ranked_movies_joined <- result_df %>% arrange(desc(rating)) %>% head(11)
#| code-fold: true
#| code-summary: "Show the code"
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
# Örnek R kodu
# movies_df_new ve movies_df veri çerçevelerini title_new ve title sütunlarına göre birleştirme
result_df <- merge(movies_df_new, movies_df, by.x = "title_new", by.y = "title", all.x = TRUE)
#| code-fold: true
#| code-summary: "Show the code"
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
colnames(movies_df_new)
colnames(movies_df)
movies_df <- rename(movies_df, title = title_new)
#| code-fold: true
#| code-summary: "Show the code"
colnames(movies_df_new)
colnames(movies_df)
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
colnames(movies_df_new)
colnames(movies_df)
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
result_df <- left_join(movies_df_new, movies_df, by = c("title_new" = "title"))
#| code-fold: true
#| code-summary: "Show the code"
URL_3 <- "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=11"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
#| code-fold: true
#| code-summary: "Show the code"
URL_3 = "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
#| code-fold: true
#| code-summary: "Show the code"
URL_3 <- "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=11"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
top1000_df %>%
kable() %>%
kable_styling(full_width = FALSE)
#| code-fold: true
#| code-summary: "Show the code"
# İlk olarak, mevcut veri çerçevenizdeki filmlerin IMDb ID'lerini alalım
imdb_ids <- top1000_df %>%
html_nodes(".lister-item-header a") %>%
html_attr("href") %>%
str_match("/title/(tt\\d+)/") %>%
.[,2]
#| code-fold: true
#| code-summary: "Show the code"
library(rvest)
URL_3 <- "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
# Veri çerçevesini oluşturun
top1000_df <- data.frame(movie_name, movie_year, duration = character(0), rating = numeric(0), votes = numeric(0))
HTML <- read_html(URL_3)
# Filmlerin başlıklarını ve yıllarını çekin
title_names <- HTML %>% html_nodes('.lister-item-header a')
title_names <- html_text(title_names)
year <- HTML %>% html_nodes(".lister-item-year")
year <- html_text(year)
year <- as.numeric(gsub("[^0-9]", "", year))
movie_name <- title_names
movie_year <- year
# IMDb ID'lerini alın
imdb_ids <- HTML %>% html_nodes(".lister-item-header a") %>% html_attr("href") %>% str_extract("tt\\d+")
# IMDb verilerini çekin ve veri çerçevesini doldurun
for (id in imdb_ids) {
movie_url <- paste("https://www.imdb.com/title/", id, "/", sep = "")
movie_html <- read_html(movie_url)
duration <- movie_html %>% html_nodes(".subtext time") %>% html_text()
rating <- movie_html %>% html_nodes(".ratingValue span") %>% html_text()
votes <- movie_html %>% html_nodes(".imdbRating a span") %>% html_text()
top1000_df <- rbind(top1000_df, data.frame(movie_name = title_names, movie_year = year, duration = duration, rating = rating, votes = votes))
}
# Sonuçları göster
print(top1000_df)
#| code-fold: true
#| code-summary: "Show the code"
# Initial code to get movie names and years (same as provided)
URL_3 <- "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
# Function to scrape movie details
get_movie_details <- function(movie_title) {
# Construct IMDb search URL
search_url <- paste0("https://www.imdb.com/find?q=", URLencode(movie_title), "&s=tt")
# Read the search page
search_page <- read_html(search_url)
# Extract the first search result link
movie_link <- search_page %>% html_node(".result_text a") %>% html_attr("href")
# Check if a movie link was found
if (!is.na(movie_link)) {
# Construct the full IMDb movie page URL
movie_url <- paste0("https://www.imdb.com", movie_link)
# Read the movie page
movie_page <- read_html(movie_url)
# Extract movie details
duration <- movie_page %>% html_node(".subtext time") %>% html_text()
rating <- movie_page %>% html_node(".imdbRating span") %>% html_text()
votes <- movie_page %>% html_node(".imdbRating a span") %>% html_text()
# Return the extracted details
return(data.frame(movie_title, duration, rating, votes))
} else {
# Return NA if movie link not found
return(data.frame(movie_title, NA, NA, NA))
}
}
# Use the function to get details for each movie in the data frame
movie_details <- lapply(top1000_df$movie_name, get_movie_details)
# Combine the details into a single data frame
movie_details_df <- do.call(rbind, movie_details)
# Merge the movie details with the top1000_df based on movie_name
result_df <- merge(top1000_df, movie_details_df, by.x = "movie_name", by.y = "movie_title", all.x = TRUE)
# Print the result
print(result_df)
#| code-fold: true
#| code-summary: "Show the code"
# Initial code to get movie names and years (same as provided)
URL_3 <- "https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250"
movie_name <- c()
movie_year <- c()
HTML <- read_html(URL_3)
title_names <- HTML %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
year <- HTML %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
movie_name <- append(movie_name, title_names)
movie_year <- append(movie_year, year)
top1000_df <- data.frame(movie_name, movie_year)
# Function to scrape movie details
get_movie_details <- function(movie_title) {
# Construct IMDb search URL
search_url <- paste0("https://www.imdb.com/find?q=", URLencode(movie_title), "&s=tt")
# Read the search page
search_page <- read_html(search_url)
# Extract the first search result link
movie_link <- search_page %>% html_node(".result_text a") %>% html_attr("href")
# Check if a movie link was found
if (!is.na(movie_link)) {
# Construct the full IMDb movie page URL
movie_url <- paste0("https://www.imdb.com", movie_link)
# Read the movie page
movie_page <- read_html(movie_url)
# Extract movie details
duration <- movie_page %>% html_node(".subtext time") %>% html_text()
rating <- movie_page %>% html_node(".imdbRating span") %>% html_text()
votes <- movie_page %>% html_node(".imdbRating a span") %>% html_text()
# Return the extracted details
return(data.frame(movie_title, duration, rating, votes))
} else {
# Return NA if movie link not found
return(data.frame(movie_title, NA, NA, NA))
}
}
# Use the function to get details for each movie in the data frame
movie_details <- lapply(top1000_df$movie_name, get_movie_details)
# Combine the details into a single data frame
movie_details_df <- do.call(rbind, movie_details)
# Merge the movie details with the top1000_df based on movie_name
result_df <- merge(top1000_df, movie_details_df, by.x = "movie_name", by.y = "movie_title", all.x = TRUE)
# Print the result
print(result_df)
